// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema for a User
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  roles      Role[]   @default([USER])

  Notes Notes[] //TODO: CHANGE TO minus n
  workout Workout[]
  workoutCycle WorkoutCycle[]
}

// Schema for written notes in a workout or workout cycle
model Notes {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String?
  note      String?
  createdAt DateTime @default(now())

  workoutId Int?
  workout   Workout?
  workoutCycleId Int?
  workoutCycle WorkoutCycle?
  exerciseId Int?
  exercise  Exercise?
  user      User @relation(fields: [userId], references: [id])
}

// Schema for a workout plan 
model Workout {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String @default("")
  createdAt   DateTime @default(now())
  noteId Int? @unique
  workoutCycleId Int?

  note  Notes? @relation(fields: [noteId], references: [id])
  user        User @relation(fields: [userId], references: [id])
  exercises   Exercise[]
  workoutCycle WorkoutCycle? @relation(fields: [workoutCycleId], references: [id])
}

model WorkoutCycle {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String @default("")
  createdAt   DateTime @default(now())
  noteId Int? @unique

  note        Notes? @relation(fields: [noteId], references: [id])
  user        User @relation(fields: [userId], references: [id])
  workouts    Workout[]
}

model Set {
  id         Int      @id @default(autoincrement())
  reps       Int
  weight     Float
  order      Int // Order of the set in the exercise
  createdAt  DateTime @default(now())
  type       SetType // PLANNED or COMPLETED

  plannedForId Int?
  plannedFor   Exercise? @relation("PlannedSets", fields: [plannedForId], references: [id])
  completedForId Int?
  completedFor Exercise? @relation("CompletedSets", fields: [completedForId], references: [id])
}

// Schema for a Exercise
model Exercise {
  id            Int      @id @default(autoincrement())
  exerciseName  String
  //! exerciseId    String In the future were the exercise dataset will be used
  plannedSets   Set[] @relation("PlannedSets")
  restTime      String?

  completedSets Set[] @relation("CompletedSets")
  completed     Boolean @default(false)
  completedAt   DateTime?
  createdAt     DateTime @default(now())

  noteId        Int? @unique
  note          Notes? @relation(fields: [noteId], references: [id])
  workoutId     Int
  workout       Workout @relation(fields: [workoutId], references: [id])
}

// Schema for a Revoked Token
model RevokedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  createdAt DateTime @default(now())
}

// Enumeration for the different roles of a user
enum Role {
  USER
  ADMIN
}

enum SetType {
  PLANNED
  COMPLETED
}